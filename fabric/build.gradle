plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        data {
            client()

            name "Fabric Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${project.rootProject.file("fabric/src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=createmoar"
            vmArg "-Dporting_lib.datagen.existing_resources=${project.rootProject.file("common/src/main/resources")}"
            vmArg "-Dcreatemoar.datagen.platform=fabric"
        }
        data1 {
            client()

            name "Forge Data Generation (via Fabric)"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${project.rootProject.file("forge/src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=createmoar"
            vmArg "-Dporting_lib.datagen.existing_resources=${project.rootProject.file("common/src/main/resources")}"
            vmArg "-Dcreatemoar.datagen.platform=forge"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    // mavens for Create Fabric and dependencies
    maven { url = "https://mvn.devos.one/#/" }
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu, EMI
    maven { url = "https://mvn.devos.one/snapshots/" } // Create Fabric, Forge Tags, Milk Lib, Registrate Fabric
    maven { url = "https://mvn.devos.one/releases" } // Porting Lib Releases
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge config api port
    maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${fabric_loader_version}")
    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    // Create - dependencies are added transitively
    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")

    // Development QoL
    modLocalRuntime("maven.modrinth:lazydfu:${lazydfu_version}") //
    modImplementation("com.terraformersmc:modmenu:${modmenu_version}") // ModMenu
    modLocalRuntime("curse.maven:spark-361579:${spark_fabric_file}") // Spark

    // Recipe Viewers - Create Fabric supports JEI, REI, and EMI.
    // See root gradle.properties to choose which to use at runtime.
    switch (fabric_recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "jei": modLocalRuntime("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"); break
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"); break
        case "emi": modLocalRuntime("dev.emi:emi-fabric:${emi_version}"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: ${fabric_recipe_viewer}. Must be JEI, REI, EMI, or disabled.")
    }
    // if you would like to add integration with them, uncomment them here.
    modCompileOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}") { transitive = false }
    modCompileOnly("mezz.jei:jei-${minecraft_version}-common:${jei_version}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}")
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rei_version}")
    modCompileOnly("dev.emi:emi-fabric:${emi_version}")

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
}

processResources {
    def properties = [
        version: project.version,
        fabric_loader_version: fabric_loader_version,
        fabric_api_version: fabric_api_version,
        minecraft_version: minecraft_version,
        create_version: create_fabric_version, // on fabric, use the entire version, unlike forge
    ]
    inputs.properties properties

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    inputFile.set(shadowJar.archiveFile)
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

sourceSets.main {
    resources { // include generated resources in resources
        srcDir("src/generated/resources")
        exclude("src/generated/resources/.cache")
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
