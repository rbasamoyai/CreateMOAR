plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}
loom {
    forge {
        mixinConfig "createmoar-common.mixins.json"
        mixinConfig "createmoar.mixins.json"
    }
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    // mavens for Forge-exclusives
    maven { // Create Forge and Registrate Forge
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
    }
    mavenCentral()
}

dependencies {
    forge "net.minecraftforge:forge:${forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Create and its dependencies
    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_forge_version}:slim") { transitive = false }
    modImplementation("com.tterrag.registrate:Registrate:${registrate_forge_version}")
    // Please replace 1.20 with ${minecraft_version} at a later date
    modImplementation("com.jozufozu.flywheel:flywheel-forge-1.20.1:${flywheel_forge_version}")

    // MixinExtras
    compileOnly("io.github.llamalad7:mixinextras-common:${mixinextras_version}")
    annotationProcessor(implementation(include("io.github.llamalad7:mixinextras-forge:${mixinextras_version}")))

    // Development QoL
    modImplementation("curse.maven:spark-361579:${spark_forge_file}") // Spark

    // JEI
    modLocalRuntime("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") { transitive = false }
    modCompileOnly("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
}

processResources {
    Map<String, String> properties = Map.of(
        "version", project.version,
        "forge_version", forge_version.split("\\.")[0], // only specify major version of forge
        "minecraft_version", minecraft_version,
        "create_version", create_forge_version.split("-")[0], // cut off build number
    )
    inputs.properties properties

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set(shadowJar.archiveFile)
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

sourceSets.main {
    resources { // include generated resources in resources
        srcDir("src/generated/resources")
        exclude("src/generated/resources/.cache")
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
