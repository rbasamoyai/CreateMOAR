MOAR todo

Basic prototyping
- Don't dwell on textures. Throw together solid color if need be.
- Don't do meltdown or radiation or whatever.

### Simulation ###

Suitable scale: centimeter-scale physics at the block scale - but heat is "ramped up"
How to manage fuel rods?

Source step
- Source term for neutrons
  - Take from reaction data
  - Based on neutron count from start of tick

Diffusion
[X] Prototype 1D Crank-Nicolson in Python
[X] Prototype 1D Crank-Nicolson outside of Minecraft in Java
[X] Prototype 2D Fractional Steps Crank-Nicolson by Cen, Hoppe, & Gu (2016) outside of Minecraft
  - https://pubs.aip.org/aip/adv/article/6/9/095305/882010/Fast-and-accurate-determination-of-3D-temperature
  - https://doi.org/10.1063/1.4962665
[X] Prototype 2D FSCN, but using mutable doubles
  - Goal is to see if avoiding copies is feasible
  - Compare with original. (It seems that it is 50% slower.)
[X] Prototype 3D Fractional Steps Crank-Nicolson outside of Minecraft
  - ~0.4 ms for the worst case scenarios (10000 block reactors), probably a bit worse
  - Average large reactor (1000 block reactor) still looks OK (around same OoM perf for the 20x20 2D reactor)
[X] Figure out suitable material scale.

TODO 01.04.2025
[ ] Implement prototype of 3D Fractional Steps Crank-Nicolson in Minecraft + MOAR
  - Don't worry too much about optimization at this point...
[ ] Benchmark prototype using Spark
  - Keep note of performance
  - Profile aggressively
[ ] Make decisions based on profiling
  - How much can the MOAR implementation be optimized?
  - Should the MOAR implementation use a larger timestep and distributed calculations?
[ ] Figure out suitable diffusion scale.

- Material changes
  - Consumption of materials
  - Fission consumes materials
  - Based on neutron count from start of tick

Lifecycle of NuclearElementView in one tick
1. the object is created from the ReactorComponent based off of the already
   present elements, with all values set
2. the object may create mutable children view objects for its products, and
   adds them to the reaction data
3. if the represented nuclear element itself has a reaction, i.e. the view is
   mutable, the reaction effects are added to the reaction data
4. during simulation, the element changes are calculated based on neutron flux
   and element count *at the start of the simulation tick*
5. after simulation, element changes are saved to components

###

Efficient block handling

Perhaps store neutron (and heat) data in ReactorCore rather than in block entities?
- BlockEntities are now only responsible for:
  - providing materials
  - receiving updates
- This allows for having regular blocks do something.

###

- Set up visualizer
  - Bars
  - Visualizing enum - can't visualize everything at once
  - Neutron count (thermal, intermediate, fast (TIF))
  - Neutron flux (TIF)
  - Heterogenous cell temperature

###

- Fluid

- Single reactor cell (createmoar:reactor_water_vessel)
  - Blocks
  - BlockEntity

Testing fluid mechanics
- Water is automatically generated and is always full. (Testing)
- Fuel source exists.
- A bit of absorber in the cell.
- False fluid input.

### Heat management ###

ReactorComponent heat methods
- #getHeatFlow(Level, BlockPos, BlockState, Direction face, double dt) : Map<NuclearElement, HeatInfo>
  - dt tentative

Material heat properties
- Neutron => heat interaction
- Neutron => energy interaction
- Energy

Making a more robust API for different things
- Internal neutron flux interaction
  - Wigner effect
- Internal heat interaction

###

Light BWR

Review code and consider rewrite

Light PWR
RBMK
Heavy Water
- CANDU
- forbidden german reactor

Documentation
- Ponders
- Do we really have to explain nuclear reactor physics to kids?

###

How does MOAR work on a code level?

Realistic reactor simulation
=> "realistic" thermal/heat mechanics
=> steam processing
=> electricity

How does MOAR work at a gameplay level?
=> Build reactor
=> Build coolant processors
=> Build steam processors
=> Built electricity generators
=> Connect these things together
=> ???
=> Electricity :)
*Reactor control also needed.

###
Reactor simulation
###

How does a fission reactor work?
- Reactor requires fuel, coolant, moderator, and absorbers.
- This makes fission reactions that generate heat and the neutrons that sustain the reactor.
- The coolant (a working fluid, e.g. water, air) absorbs the heat for further thermal work.
- Pump coolant into reactor.
- Fluid heats up, may change state (e.g. steam for BWRs).
- Fluid is pumped/vented out of the reactor for further processing.
- Absorbers control the reactor by absorbing neutrons.

How does the reactor simulation work?
- Reactor does number crunching and data update outside of tick so as to be done all at once.
- Reactors are freeform and are made up of reactor cells.
- This mandates that all reactor cells must be loaded in the world.
- Reactors mainly simulate nuclear interactions and thermal interactions.
  - These two are interrelated through certain phenomena that should be simulated.
- Reactors have multiple timesteps in a single tick - up to 10!
- Reactor cells contain data on substances inside the cell that play a part in nuclear and thermal simulation.
  - Gases are by concentration.
  - Liquids and solids are by volume.
    - Solid/liquid expansion is considered negligible.
  - Molecular counts are derived from these values.
  - Liquids and gases are associated with pressure, which has major physical effects.
- Neutrons and heat can transfer between cells and even the world.
- Blocks next to reactor cells can change the behavior of neutron transfer.
- Different materials have to be handled differently with respect to heat transfer in a heterogenous reactor cell.
  - The difference between melting graphite/lead/concrete/steel into corium vs. boiling water.

Reactor basics
- A vessel.
- Fuel assembly with fissionable and fertile elements, i.e. U-235 and U-238. May also have oxygen.
- Control rods with high absorption.
- A source of coolant, i.e. water.
- An output for hot coolant, i.e. steam.
- Holes for inserting fuel assembly and control rods.
